// Code generated by dagger-compiler.  Do not edit.
package au.com.cybersearch2.classybean;

import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<BeanUtilTest.Injectee>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code BeanUtilTest.Injectee} and its
 * dependencies.
 *
 * Being a {@code Provider<BeanUtilTest.Injectee>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<BeanUtilTest.Injectee>} and handling injection
 * of annotated fields.
 */
public final class BeanUtilTest$Injectee$$InjectAdapter extends Binding<BeanUtilTest.Injectee>
    implements Provider<BeanUtilTest.Injectee>, MembersInjector<BeanUtilTest.Injectee> {
  private Binding<Object> object;

  public BeanUtilTest$Injectee$$InjectAdapter() {
    super("au.com.cybersearch2.classybean.BeanUtilTest$Injectee", "members/au.com.cybersearch2.classybean.BeanUtilTest$Injectee", NOT_SINGLETON, BeanUtilTest.Injectee.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    object = (Binding<Object>) linker.requestBinding("java.lang.Object", BeanUtilTest.Injectee.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(object);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<BeanUtilTest.Injectee>}.
   */
  @Override
  public BeanUtilTest.Injectee get() {
    BeanUtilTest.Injectee result = new BeanUtilTest.Injectee();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<BeanUtilTest.Injectee>}.
   */
  @Override
  public void injectMembers(BeanUtilTest.Injectee object) {
    object.object = object.get();
  }

}
