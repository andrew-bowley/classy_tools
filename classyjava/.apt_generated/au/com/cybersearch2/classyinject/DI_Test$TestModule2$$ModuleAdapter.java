// Code generated by dagger-compiler.  Do not edit.
package au.com.cybersearch2.classyinject;

import dagger.internal.BindingsGroup;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class DI_Test$TestModule2$$ModuleAdapter extends ModuleAdapter<DI_Test.TestModule2> {
  private static final String[] INJECTS = { "members/au.com.cybersearch2.classyinject.DI_Test$Injectee", };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public DI_Test$TestModule2$$ModuleAdapter() {
    super(au.com.cybersearch2.classyinject.DI_Test.TestModule2.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, true /*complete*/, false /*library*/);
  }

  @Override
  public DI_Test.TestModule2 newModule() {
    return new au.com.cybersearch2.classyinject.DI_Test.TestModule2();
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, DI_Test.TestModule2 module) {
    bindings.contributeProvidesBinding("java.lang.Object", new ProvideObjectProvidesAdapter(module));
  }

  /**
   * A {@code Binding<java.lang.Object>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<java.lang.Object>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideObjectProvidesAdapter extends ProvidesBinding<Object>
      implements Provider<Object> {
    private final DI_Test.TestModule2 module;

    public ProvideObjectProvidesAdapter(DI_Test.TestModule2 module) {
      super("java.lang.Object", NOT_SINGLETON, "au.com.cybersearch2.classyinject.DI_Test.TestModule2", "provideObject");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<java.lang.Object>}.
     */
    @Override
    public Object get() {
      return module.provideObject();
    }
  }
}
