// Code generated by dagger-compiler.  Do not edit.
package au.com.cybersearch2.classyjpa.entity;

import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;

/**
 * A {@code Binding<PersistenceContainer>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code PersistenceContainer} and its
 * dependencies.
 *
 * Being a {@code Provider<PersistenceContainer>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<PersistenceContainer>} and handling injection
 * of annotated fields.
 */
public final class PersistenceContainer$$InjectAdapter extends Binding<PersistenceContainer>
    implements MembersInjector<PersistenceContainer> {
  private Binding<au.com.cybersearch2.classyjpa.persist.PersistenceFactory> persistenceFactory;

  public PersistenceContainer$$InjectAdapter() {
    super(null, "members/au.com.cybersearch2.classyjpa.entity.PersistenceContainer", NOT_SINGLETON, PersistenceContainer.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    persistenceFactory = (Binding<au.com.cybersearch2.classyjpa.persist.PersistenceFactory>) linker.requestBinding("au.com.cybersearch2.classyjpa.persist.PersistenceFactory", PersistenceContainer.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(persistenceFactory);
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<PersistenceContainer>}.
   */
  @Override
  public void injectMembers(PersistenceContainer object) {
    object.persistenceFactory = persistenceFactory.get();
  }

}
