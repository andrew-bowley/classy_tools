// Code generated by dagger-compiler.  Do not edit.
package au.com.cybersearch2.classytask;

import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;

/**
 * A {@code Binding<WorkerRunnable>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code WorkerRunnable} and its
 * dependencies.
 *
 * Being a {@code Provider<WorkerRunnable>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<WorkerRunnable>} and handling injection
 * of annotated fields.
 */
public final class WorkerRunnable$$InjectAdapter extends Binding<WorkerRunnable>
    implements MembersInjector<WorkerRunnable> {
  private Binding<ThreadHelper> threadHelper;

  public WorkerRunnable$$InjectAdapter() {
    super(null, "members/au.com.cybersearch2.classytask.WorkerRunnable", NOT_SINGLETON, WorkerRunnable.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    threadHelper = (Binding<ThreadHelper>) linker.requestBinding("au.com.cybersearch2.classytask.ThreadHelper", WorkerRunnable.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(threadHelper);
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<WorkerRunnable>}.
   */
  @Override
  public void injectMembers(WorkerRunnable object) {
    object.threadHelper = threadHelper.get();
  }

}
