// Code generated by dagger-compiler.  Do not edit.
package au.com.cybersearch2.classydb;

import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;

/**
 * A {@code Binding<NativeScriptDatabaseWork>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code NativeScriptDatabaseWork} and its
 * dependencies.
 *
 * Being a {@code Provider<NativeScriptDatabaseWork>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<NativeScriptDatabaseWork>} and handling injection
 * of annotated fields.
 */
public final class NativeScriptDatabaseWork$$InjectAdapter extends Binding<NativeScriptDatabaseWork>
    implements MembersInjector<NativeScriptDatabaseWork> {
  private Binding<au.com.cybersearch2.classyapp.ResourceEnvironment> resourceEnvironment;
  private Binding<DatabaseWork> supertype;

  public NativeScriptDatabaseWork$$InjectAdapter() {
    super(null, "members/au.com.cybersearch2.classydb.NativeScriptDatabaseWork", NOT_SINGLETON, NativeScriptDatabaseWork.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    resourceEnvironment = (Binding<au.com.cybersearch2.classyapp.ResourceEnvironment>) linker.requestBinding("au.com.cybersearch2.classyapp.ResourceEnvironment", NativeScriptDatabaseWork.class, getClass().getClassLoader());
    supertype = (Binding<DatabaseWork>) linker.requestBinding("members/au.com.cybersearch2.classydb.DatabaseWork", NativeScriptDatabaseWork.class, getClass().getClassLoader(), false, true);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(resourceEnvironment);
    injectMembersBindings.add(supertype);
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<NativeScriptDatabaseWork>}.
   */
  @Override
  public void injectMembers(NativeScriptDatabaseWork object) {
    object.resourceEnvironment = resourceEnvironment.get();
    supertype.injectMembers(object);
  }

}
